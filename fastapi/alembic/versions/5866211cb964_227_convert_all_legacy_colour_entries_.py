"""#227 convert all legacy colour entries to standalone entities and map to bikes

Revision ID: 5866211cb964
Revises: 5eef3c406203
Create Date: 2025-09-20 22:55:16.097334

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.exc import IntegrityError

from app import models
from sqlalchemy import select, text

# revision identifiers, used by Alembic.
revision: str = '5866211cb964'
down_revision: Union[str, None] = '5eef3c406203'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    preset_colours = {
        "black": int("000000", 16),
        "white": int("FFFFFF", 16),
        "grey": int("808080", 16),

        "red": int("FF0000", 16),
        "maroon": int("800000", 16),
        "light red": int("FF8080", 16),

        "green": int("00FF00", 16),
        "hulk": int("008000", 16),
        "light green": int("80FF80", 16),

        "blue": int("0000FF", 16),
        "navy blue": int("000080", 16),
        "blue party parrot": int("8080FF", 16),

        "yellow": int("FFFF00", 16),
        "drably olive": int("808000", 16),
        "butter": int("FFFF80", 16),

        "cyan": int("00FFFF", 16),
        "teal": int("008080", 16),
        "electric blue": int("80FFFF", 16),

        "magenta": int("FF00FF", 16),
        "purple": int("800080", 16),
        "hottest of pinks": int("FF80FF", 16),

        "orange juice": int("FF8000", 16),
        "beasty brown": int("603000", 16),
        "buttery": int("FFC080", 16)
    }

    for c in preset_colours.keys():
        op.execute(f"INSERT INTO colours (id, name) VALUES ('{preset_colours[c]}', '{c}');")

    mapping = {
        # idempotent
        "black": "black",
        "white": "white",
        "grey": "grey",
        "red": "red",
        "maroon": "maroon",
        "light red": "light red",
        "green": "green",
        "hulk": "hulk",
        "light green": "light green",
        "blue": "blue",
        "navy blue": "navy blue",
        "blue party parrot": "blue party parrot",
        "yellow": "yellow",
        "drably olive ": "drably olive ",
        "butter": "butter",
        "cyan": "cyan",
        "teal": "teal",
        "electric blue": "electric blue",
        "magenta": "magenta",
        "purple": "purple",
        "hottest of pinks": "hottest of pinks",
        "orange juice": "orange juice",
        "beasty brown": "beasty brown",
        "buttery": "buttery",
        # non-idempotent
        "dark red": "maroon",
        "dark green": "hulk",
        "dark blue": "navy blue",
        "dark yellow": "drably olive",
        "dark orange": "orange juice",
        "dark purple": "purple",
        "dark teal": "teal",
        "dark cyan": "teal",
        "dark magenta": "purple",
        "silver": "grey",
        "gun metal": "grey",
        "bright blue": "electric blue",
        "beige": "buttery",
        "burg": "maroon",
        "red wine": "maroon",
        "light blue": "electric blue",
        "cream red": "light red",
        "midnight blue": "navy blue",
        "cream": "buttery",
        "petrol green": "teal",
        "fools gold": "drably olive",
        "torkoyz": "cyan",
        "turquoise": "cyan",
        "bright green": "light green",
        "gold": "drably olive",
        "copper": "beasty brown",
        "pink": "hottest of pinks",
        "chrome": "grey",
        "lavender": "blue party parrot",
        "violet": "purple",
        "olive green": "hulk",
        "burgundy": "maroon",
        "orange": "orange juice",
        "gray": "grey",
        "dark grey": "grey",
        "lime": "green",
        "blacky": "black"
    }

    db = op.get_bind()

    mapping_keys = sorted(list(mapping.keys()), key=lambda x: x.count(" "), reverse=True)

    for row in db.execute(text("SELECT id, colour FROM bikes;")):
        colour = row[1]
        # colour = bike.colour
        typed_colours = [_.strip() for _ in colour
        .replace("&", "+")
        .replace(",", "+")
        .replace("/", "+")
        .replace(" and ", "+")
        .replace("-", "+")
        .replace(" with ", "+")
        .replace("metallic", "")
        .split("+")]

        colours_to_add = []

        for mapping_key in mapping_keys:
            if mapping_key in typed_colours:
                typed_colours.remove(mapping_key)
                colour_name = mapping[mapping_key]
                colour_value = preset_colours[colour_name]
                if colour_value not in colours_to_add:
                    colours_to_add.append(colour_value)

        typed_colours_remainder = str.join(" ", typed_colours)
        typed_colours = typed_colours_remainder.split(" ")
        for mapping_key in mapping_keys:
            if mapping_key in typed_colours:
                typed_colours.remove(mapping_key)
                colour_name = mapping[mapping_key]
                colour_value = preset_colours[colour_name]
                if colour_value not in colours_to_add:
                    colours_to_add.append(colour_value)

        for c in colours_to_add:
            if len([_ for _ in
                    db.execute(text("SELECT 1 FROM bikecolours WHERE bikeid=:bikeid AND colourid=:colourid;"),
                               {"bikeid": row[0], "colourid": c})]) == 0:
                op.execute(f"INSERT INTO bikecolours (bikeid, colourid) VALUES ('{row[0]}', '{c}');")

        print("colour remains", typed_colours)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DELETE FROM bikecolours;")
    op.execute("DELETE FROM colours;")
    # ### end Alembic commands ###
